Index: src/project/payment/Payment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package project.payment;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Payment {\r\n    private int transactionId;\r\n    private String paymentStatus;\r\n    private String paymentMethod;\r\n\r\n    public Payment(int transactionId, String paymentStatus, String paymentMethod) {\r\n        this.transactionId = transactionId;\r\n        this.paymentStatus = paymentStatus;\r\n        this.paymentMethod = paymentMethod;\r\n    }\r\n\r\n    public int getTransactionId() {\r\n        return transactionId;\r\n    }\r\n\r\n    public void setTransactionId(int transactionId) {\r\n        this.transactionId = transactionId;\r\n    }\r\n\r\n    public String getPaymentStatus() {\r\n        return paymentStatus;\r\n    }\r\n\r\n    public void setPaymentStatus(String paymentStatus) {\r\n        this.paymentStatus = paymentStatus;\r\n    }\r\n\r\n    public String getPaymentMethod() {\r\n        return paymentMethod;\r\n    }\r\n\r\n    public void setPaymentMethod(String paymentMethod) {\r\n        this.paymentMethod = paymentMethod;\r\n    }\r\n\r\n    public void paymentProcess() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"Choose your preferred payment method:\");\r\n        System.out.println(\"(1) Cash on delivery\");\r\n        System.out.println(\"(2) Visa\");\r\n        System.out.println(\"(3) Digital wallet\");\r\n        System.out.println(\"------------------------------------------------------\");\r\n        int choice = scanner.nextInt();\r\n\r\n        switch (choice) {\r\n            case 1: {\r\n                cash();\r\n                break;\r\n            }\r\n            case 2: {\r\n                visa();\r\n                break;\r\n            }\r\n            case 3: {\r\n                wallet();\r\n                break;\r\n            }\r\n            default: {\r\n                System.out.println(\"Invalid choice\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void cash() {\r\n        System.out.println(\"Thanks for using our cash services.\");\r\n        setPaymentStatus(\"Paid\");\r\n        setPaymentMethod(\"Cash\");\r\n    }\r\n\r\n    private void visa() {\r\n        System.out.println(\"Enter your Visa details:\");\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        // Card number validation (length and digits only)\r\n        long cardNumber = 0;\r\n        while (true) {\r\n            System.out.print(\"Enter the 16-digit Card Number (only digits allowed): \");\r\n            String cardNumberStr = scanner.next();\r\n\r\n            if (cardNumberStr.matches(\"^[0-9]{16}$\")) {\r\n                cardNumber = Long.parseLong(cardNumberStr);\r\n                break; // Valid card number format\r\n            } else {\r\n                System.out.println(\"Invalid input. Please enter a 16-digit number.\");\r\n            }\r\n        }\r\n\r\n        scanner.nextLine(); // Consume the newline character\r\n\r\n        // Cardholder name validation\r\n        String cardHolderName;\r\n        while (true) {\r\n            System.out.print(\"Card Holder Name (letters and spaces only): \");\r\n            cardHolderName = scanner.nextLine().trim(); // Handle spaces in name\r\n            if (cardHolderName.matches(\"^[a-zA-Z ]+$\")) {\r\n                break; // Valid name format\r\n            } else {\r\n                System.out.println(\"Invalid name format. Please use letters and spaces only.\");\r\n            }\r\n        }\r\n\r\n        // CVV input with validation loop\r\n        String cvv;\r\n        while (true) {\r\n            System.out.print(\"CVV (3 digits only): \");\r\n            cvv = scanner.next();\r\n\r\n            if (cvv.matches(\"^[0-9]{3}$\")) {\r\n                break; // Valid CVV format\r\n            } else {\r\n                System.out.println(\"Invalid CVV. Please enter a 3-digit number.\");\r\n            }\r\n        }\r\n\r\n        // Set payment status and method directly\r\n        setPaymentStatus(\"Paid\");\r\n        setPaymentMethod(\"Visa\");\r\n\r\n        // ... (rest of your payment processing logic)\r\n\r\n        System.out.println(\"Payment successful. Thank you!\");\r\n    }\r\n\r\n    private void wallet() {\r\n        System.out.println(\"Enter your wallet details:\");\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.print(\"Wallet Owner: \");\r\n        String walletOwner = scanner.next();\r\n\r\n        // Wallet password validation\r\n        String password;\r\n        while (true) {\r\n            System.out.print(\"Password (at least 8 characters with at least one capital letter and one number): \");\r\n            password = scanner.next();\r\n\r\n            if (password.length() >= 8 && password.matches(\".*[A-Z].*\") && password.matches(\".*\\\\d.*\")) {\r\n                break;  // Valid password format\r\n            } else {\r\n                System.out.println(\"Invalid password. Please meet the specified criteria.\");\r\n            }\r\n        }\r\n\r\n        // Implement actual logic to process wallet details securely\r\n\r\n        // Set payment status and method directly\r\n        setPaymentStatus(\"Paid\");\r\n        setPaymentMethod(\"Digital Wallet\");\r\n\r\n        System.out.println(\"Payment successful. Thank you!\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/project/payment/Payment.java b/src/project/payment/Payment.java
--- a/src/project/payment/Payment.java	(revision 5364a974c0d15942393c3969d5a0b86a6f6158ad)
+++ b/src/project/payment/Payment.java	(date 1703379347336)
@@ -66,6 +66,7 @@
     }
 
     private void cash() {
+        System.out.print("\n");
         System.out.println("Thanks for using our cash services.");
         setPaymentStatus("Paid");
         setPaymentMethod("Cash");
Index: src/project/order/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package project.order;\r\n\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\nimport java.io.*;\r\n\r\npublic class Order implements OrderManagement {\r\n    private String username;\r\n    private List<String> items;\r\n    private String status;\r\n\r\n    public Order(String username) {\r\n        this.username = username;\r\n        this.items = new ArrayList<>();\r\n        this.status = \"Pending\";\r\n    }\r\n\r\n    public void addItem(String item) {\r\n        items.add(item);\r\n    }\r\n\r\n    public void viewOrder() {\r\n        System.out.println(\"Order Details for \" + username);\r\n        System.out.println(\"Status: \" + status);\r\n        System.out.println(\"Items:\");\r\n\r\n        for (String item : items) {\r\n            System.out.println(item);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public List<String> getItems() {\r\n        return items;\r\n    }\r\n\r\n    public String getStatus() {\r\n        return status;\r\n    }\r\n}\r\n interface OrderManagement {\r\n    default void placeOrder(String username, List<String> items) {\r\n        Order order = new Order(username);\r\n\r\n        for (String item : items) {\r\n            order.addItem(item);\r\n        }\r\n\r\n\r\n        saveOrder(order);\r\n\r\n        System.out.println(\"Order placed successfully!\");\r\n    }\r\n\r\n    default void saveOrder(Order order) {\r\n        try (PrintWriter writer = new PrintWriter(new FileWriter(\"orders.txt\", true))) {\r\n            writer.println(\"Username: \" + order.getUsername());\r\n            writer.println(\"Status: \" + order.getStatus());\r\n            writer.println(\"Items:\");\r\n            for (String item : order.getItems()) {\r\n                writer.println(item);\r\n            }\r\n            writer.println(\"----------\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"Error saving order.\");\r\n        }\r\n    }\r\n\r\n    default void viewOrders() {\r\n        try (Scanner scanner = new Scanner(new File(\"orders.txt\"))) {\r\n            while (scanner.hasNextLine()) {\r\n                String line = scanner.nextLine();\r\n                if (line.equals(\"----------\")) {\r\n                    System.out.println();\r\n                } else {\r\n                    System.out.println(line);\r\n                }\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"Error viewing orders.\");\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/project/order/Order.java b/src/project/order/Order.java
--- a/src/project/order/Order.java	(revision 5364a974c0d15942393c3969d5a0b86a6f6158ad)
+++ b/src/project/order/Order.java	(date 1703361376842)
@@ -5,46 +5,7 @@
 import java.util.Scanner;
 import java.io.*;
 
-public class Order implements OrderManagement {
-    private String username;
-    private List<String> items;
-    private String status;
-
-    public Order(String username) {
-        this.username = username;
-        this.items = new ArrayList<>();
-        this.status = "Pending";
-    }
-
-    public void addItem(String item) {
-        items.add(item);
-    }
-
-    public void viewOrder() {
-        System.out.println("Order Details for " + username);
-        System.out.println("Status: " + status);
-        System.out.println("Items:");
-
-        for (String item : items) {
-            System.out.println(item);
-        }
-    }
-
-
-
-    public String getUsername() {
-        return username;
-    }
-
-    public List<String> getItems() {
-        return items;
-    }
-
-    public String getStatus() {
-        return status;
-    }
-}
- interface OrderManagement {
+interface OrderManagement {
     default void placeOrder(String username, List<String> items) {
         Order order = new Order(username);
 
@@ -90,3 +51,42 @@
     }
 }
 
+public class Order implements OrderManagement {
+    private String username;
+    private List<String> items;
+    private String status;
+
+    public Order(String username) {
+        this.username = username;
+        this.items = new ArrayList<>();
+        this.status = "Pending";
+    }
+
+    public void addItem(String item) {
+        items.add(item);
+    }
+
+    public void viewOrder() {
+        System.out.println("Order Details for " + username);
+        System.out.println("Status: " + status);
+        System.out.println("Items:");
+
+        for (String item : items) {
+            System.out.println(item);
+        }
+    }
+
+
+    public String getUsername() {
+        return username;
+    }
+
+    public List<String> getItems() {
+        return items;
+    }
+
+    public String getStatus() {
+        return status;
+    }
+}
+
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d01ccfb9-7a84-48ab-a02f-25d9b8755d94\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/admin/Admin.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/admin/Admin.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/admin/AdminPermissions.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/admin/AdminPermissions.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/cart/cart.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/cart/cart.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/main/MainClass.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/main/MainClass.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/main/Role.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/main/Role.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/menu/Dish.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/menu/Dish.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/menu/Menu.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/menu/Menu.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/order/Order.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/order/Order.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/payment/Payment.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/payment/Payment.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/restaurant/Restaurant.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/restaurant/Restaurant.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/restaurant/RestaurantPermissions.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/restaurant/RestaurantPermissions.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/restaurant/restaurantRegistration.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/restaurant/restaurantRegistration.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/review/review.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/review/review.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/user/InputChecks.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/user/InputChecks.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/user/User.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/user/User.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/project/user/UserManagementSystem.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/project/user/UserManagementSystem.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/users.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/users.txt\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$/..\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2Zl8PAvZwpVQamVJpRVL10hRqNf\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.MainClass.executor\": \"Run\",\r\n    \"Application.Unnamed.executor\": \"Run\",\r\n    \"Notification.DisplayName-DoNotAsk-WindowsDefender\": \"Microsoft Defender configuration\",\r\n    \"Notification.DoNotAsk-WindowsDefender\": \"true\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"extract.method.default.visibility\": \"private\",\r\n    \"git-widget-placeholder\": \"testing-sth\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Unnamed\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"project.main.MainClass\" />\r\n      <module name=\"OOP23_Food Ordering System\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-21.0.1-openjdk-21.0.1-3183f394aec4-7d648f2c\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"d01ccfb9-7a84-48ab-a02f-25d9b8755d94\" name=\"Changes\" comment=\"\" />\r\n      <created>1702985281469</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1702985281469</updated>\r\n      <workItem from=\"1703367214668\" duration=\"6425000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5364a974c0d15942393c3969d5a0b86a6f6158ad)
+++ b/.idea/workspace.xml	(date 1703380324116)
@@ -4,25 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="d01ccfb9-7a84-48ab-a02f-25d9b8755d94" name="Changes" comment="">
+    <list default="true" id="d01ccfb9-7a84-48ab-a02f-25d9b8755d94" name="Changes" comment="I did it...">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/project/admin/Admin.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/admin/Admin.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/project/admin/AdminPermissions.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/admin/AdminPermissions.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/project/cart/cart.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/cart/cart.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/project/main/MainClass.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/main/MainClass.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/project/main/Role.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/main/Role.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/project/menu/Dish.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/menu/Dish.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/project/menu/Menu.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/menu/Menu.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/project/order/Order.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/order/Order.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/project/payment/Payment.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/payment/Payment.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/project/restaurant/Restaurant.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/restaurant/Restaurant.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/project/restaurant/RestaurantPermissions.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/restaurant/RestaurantPermissions.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/project/restaurant/restaurantRegistration.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/restaurant/restaurantRegistration.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/project/review/review.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/review/review.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/project/user/InputChecks.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/user/InputChecks.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/project/user/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/user/User.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/project/user/UserManagementSystem.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/project/user/UserManagementSystem.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/users.txt" beforeDir="false" afterPath="$PROJECT_DIR$/users.txt" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -63,6 +50,7 @@
     "extract.method.default.visibility": "private",
     "git-widget-placeholder": "testing-sth",
     "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "C:/Users/Nader/Desktop/ahmed stuff",
     "node.js.detected.package.eslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
     "node.js.selected.package.tslint": "(autodetect)",
@@ -94,11 +82,35 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1702985281469</updated>
-      <workItem from="1703367214668" duration="6425000" />
+      <workItem from="1703367214668" duration="12675000" />
+    </task>
+    <task id="LOCAL-00001" summary="I did it...">
+      <option name="closed" value="true" />
+      <created>1703374261794</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1703374261794</updated>
     </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="added functions to cart and it works in main" />
+    <option name="LAST_COMMIT_MESSAGE" value="added functions to cart and it works in main" />
+  </component>
 </project>
\ No newline at end of file
