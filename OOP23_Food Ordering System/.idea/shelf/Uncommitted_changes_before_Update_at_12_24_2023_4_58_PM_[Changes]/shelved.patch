Index: src/project/menu/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package project.menu;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.io.*;\r\nimport java.util.Objects;\r\n\r\n\r\npublic class Menu {\r\n\r\n    public ArrayList<Dish> newDishes;\r\n    private ArrayList<Dish> restaurantMenu;\r\n    private ArrayList<Dish> allMenus;\r\n\r\n    public Menu() {\r\n        this.restaurantMenu = new ArrayList<>();\r\n        this.newDishes = new ArrayList<>();\r\n        this.allMenus = new ArrayList<>();\r\n        readMenuDataFile();\r\n    }\r\n\r\n    public void addItem(String restaurantName, String dishName, Double price) {\r\n        Dish dishToAdd = new Dish(restaurantName, dishName, price);\r\n        boolean found = false;\r\n\r\n        for (Dish dish : restaurantMenu) {\r\n            if (dishToAdd.equals(dish)) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!found) {\r\n            restaurantMenu.add(dishToAdd);\r\n        }\r\n\r\n    }\r\n\r\n    public void addNewDish(String restaurantName, String dishName, Double price) {\r\n        Dish dishToAdd = new Dish(restaurantName, dishName, price);\r\n        boolean found = false;\r\n        for (Dish dish : allMenus) {\r\n            if (dishToAdd.equals(dish)) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!found) {\r\n            newDishes.add(dishToAdd);\r\n        } else {\r\n            System.out.println(\"DISH ALREADY EXISTS!\");\r\n        }\r\n    }\r\n\r\n    public void readMenuDataFile(String rName) {\r\n        try (BufferedReader bufferedReader = new BufferedReader(new FileReader(\"menus.txt\"))) {\r\n            String line;\r\n            while ((line = bufferedReader.readLine()) != null) //reads each line until there is none\r\n            {\r\n                String[] itemData = line.split(\",\");\r\n                if (Objects.equals(rName, itemData[0])) {\r\n                    String restaurantName = itemData[0];\r\n                    String dishName = itemData[1];\r\n                    double price = Double.parseDouble(itemData[2]);\r\n                    addItem(restaurantName, dishName, price);\r\n                }\r\n            }\r\n        } catch (IOException exp) {\r\n            System.out.println(exp.getMessage());\r\n        }\r\n    }\r\n\r\n    public void readMenuDataFile() {\r\n        try (BufferedReader bufferedReader = new BufferedReader(new FileReader(\"menus.txt\"))) {\r\n            String line;\r\n            while ((line = bufferedReader.readLine()) != null) //reads each line until there is none\r\n            {\r\n                String[] itemData = line.split(\",\");\r\n                String restaurantName = itemData[0];\r\n                String dishName = itemData[1];\r\n                double price = Double.parseDouble(itemData[2]);\r\n                Dish dish = new Dish(restaurantName, dishName, price);\r\n                allMenus.add(dish);\r\n\r\n            }\r\n        } catch (IOException exp) {\r\n            System.out.println(exp.getMessage());\r\n        }\r\n    }\r\n\r\n    public void writeMenuDataFile() {\r\n        try (PrintWriter writer = new PrintWriter((new FileWriter(\"menus.txt\", true)))) {\r\n            if (!newDishes.isEmpty()) {\r\n                for (Dish dish : newDishes) {\r\n                    writer.write(dish.getRestaurantName() + \",\" + dish.getDishName() + \",\" + dish.getPrice() + \"\\n\");\r\n                }\r\n            }\r\n        } catch (IOException exp) {\r\n            System.out.println(exp.getMessage());\r\n        }\r\n    }\r\n\r\n    public void displayMenu(String restaurantName) {\r\n        for (Dish dish : restaurantMenu) {\r\n            if (dish.getRestaurantName().equals(restaurantName)) {\r\n                System.out.println(restaurantMenu.indexOf(dish)+1 + \". \" + dish.getDishName() + \": $\" + dish.getPrice());\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // Get a specific menu item\r\n    public Dish getMenuItem(int index) {\r\n        return restaurantMenu.get(index);\r\n    }\r\n\r\n    // Get the number of menu items\r\n    public int getMenuSize() {\r\n        return restaurantMenu.size();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/project/menu/Menu.java b/src/project/menu/Menu.java
--- a/src/project/menu/Menu.java	(revision b9cd107d8f990a33023584c0c36d153fb9aadf9e)
+++ b/src/project/menu/Menu.java	(date 1703412660825)
@@ -35,7 +35,6 @@
         if (!found) {
             restaurantMenu.add(dishToAdd);
         }
-
     }
 
     public void addNewDish(String restaurantName, String dishName, Double price) {
Index: src/project/restaurant/RestaurantPermissions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package project.restaurant;\r\nimport project.menu.Menu;\r\nimport project.order.Order;\r\nimport java.util.Random;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic interface RestaurantPermissions {\r\n    default void addDishToMenuPage(Restaurant restaurant) {\r\n        Menu menu = new Menu();\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"\\t\\t### Restaurant Add Dish To Menu Page ###\\n\");\r\n\r\n        menu.readMenuDataFile(restaurant.getRestaurantName());\r\n\r\n        System.out.print(\"Enter Dish Name: \");\r\n        String dishName = scanner.nextLine();\r\n\r\n        System.out.print(\"Enter Dish Price: \");\r\n        Double dishPrice = Double.parseDouble(scanner.nextLine());\r\n\r\n        menu.addNewDish(restaurant.getRestaurantName(), dishName, dishPrice);\r\n        menu.writeMenuDataFile();\r\n    }\r\n\r\n\r\n    default void viewOrders() {\r\n        Order order = new Order(\"name\");\r\n        order.viewOrders();\r\n    }\r\n\r\n\r\n    //view profit,etc...\r\n    default void generateBusinessReport(Restaurant restaurant) {\r\n        Random rand = new Random();\r\n        System.out.println(\"\\t\\t#### BUSINESS REPORT ####\");\r\n        System.out.println(\"Business Report For \" + restaurant.getRestaurantName());\r\n        System.out.println(\"Users served: \" + rand.nextInt(5000));\r\n        System.out.println(\"Revenue for the day: \" + rand.nextInt(10000) + \"$\");\r\n        System.out.println(\"Restaurant Performance: GREAT\");\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/project/restaurant/RestaurantPermissions.java b/src/project/restaurant/RestaurantPermissions.java
--- a/src/project/restaurant/RestaurantPermissions.java	(revision b9cd107d8f990a33023584c0c36d153fb9aadf9e)
+++ b/src/project/restaurant/RestaurantPermissions.java	(date 1703415611469)
@@ -25,7 +25,7 @@
 
 
     default void viewOrders() {
-        Order order = new Order("name");
+        Order order = new Order();
         order.viewOrders();
     }
 
Index: src/project/restaurant/Restaurant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package project.restaurant;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\npublic class Restaurant implements RestaurantPermissions{\r\n    protected String restaurantName;\r\n    protected String restaurantAddress;\r\n    protected String restaurantContact;\r\n    protected String restaurantEmail;\r\n    protected String restaurantPassword;\r\n\r\n    ArrayList<ArrayList<String>> restaurants;\r\n\r\n    public Restaurant() {\r\n        this.restaurants = new ArrayList<>();\r\n\r\n    }\r\n\r\n    public Restaurant(String restaurantName)\r\n    {\r\n        this.restaurants = new ArrayList<>();\r\n        this.restaurantName = restaurantName;\r\n    }\r\n\r\n    public Restaurant(String restaurantName, String restaurantAddress, String restaurantContact, String restaurantEmail, String restaurantPassword) {\r\n        this.restaurantName = restaurantName;\r\n        this.restaurantAddress = restaurantAddress;\r\n        this.restaurantContact = restaurantContact;\r\n        this.restaurantEmail = restaurantEmail;\r\n        this.restaurantPassword = restaurantPassword;\r\n        this.restaurants = new ArrayList<>();\r\n    }\r\n\r\n    public ArrayList<ArrayList<String>> getRestaurants() {\r\n        return restaurants;\r\n    }\r\n\r\n    public String getRestaurantName() {\r\n        return restaurantName;\r\n    }\r\n\r\n    public String getRestaurantAddress() {\r\n        return restaurantAddress;\r\n    }\r\n\r\n    public String getRestaurantContact() {\r\n        return restaurantContact;\r\n    }\r\n\r\n    public String getRestaurantEmail() {\r\n        return restaurantEmail;\r\n    }\r\n\r\n    public String getRestaurantPassword() {\r\n        return restaurantPassword;\r\n    }\r\n\r\n    /**\r\n     * function used to load the restaurants from the file\r\n     */\r\n    public void loadRestaurantsFromFile() {\r\n        try {\r\n            Scanner fileScanner = new Scanner(new File(\"restaurants.txt\"));\r\n\r\n            while (fileScanner.hasNextLine()) {\r\n                String line = fileScanner.nextLine();\r\n                String[] parts = line.split(\",\");\r\n                if (parts.length == 5) {\r\n                    String restaurantName = parts[0].trim();\r\n                    String restaurantContact = parts[1].trim();\r\n                    String restaurantAddress = parts[2].trim();\r\n                    String restaurantEmail = parts[3].trim();\r\n                    String restaurantPassword = parts[4].trim();\r\n                    addRestaurantDetails(restaurantName, restaurantContact, restaurantAddress, restaurantEmail, restaurantPassword);\r\n                }\r\n            }\r\n            fileScanner.close();\r\n        } catch (FileNotFoundException e) {\r\n            System.out.println(\"File not found: \" + e.getMessage());\r\n        } catch (NumberFormatException e) {\r\n            System.out.println(\"Error parsing price: \" + e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    /** function used to save restaurants to the files\r\n     *\r\n     * @param restaurants the restaurants and all the details\r\n     */\r\n    public void RestaurantSaveToFiles(ArrayList<ArrayList<String>> restaurants) {\r\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(\"restaurants.txt\"))) {\r\n            for (ArrayList<String> row : restaurants) {\r\n                // Join elements of the row into a single string, separated by commas\r\n                String line = String.join(\",\", row);\r\n                // Write the line to the file\r\n                writer.write(line);\r\n                // Write a newline character to separate rows\r\n                writer.newLine();\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    /** function gets the details of the restaurant and add it to the restaurant arraylist\r\n     * it has no returns\r\n     *\r\n     * @param restaurantName the name of the restaurant\r\n     * @param restaurantContact the phone number of the restaurant\r\n     * @param restaurantAddress the address of the restaurant\r\n     * @param restaurantEmail the mail of the restaurant\r\n     * @param restaurantPassword the password of the restaurant\r\n     */\r\n    public void addRestaurantDetails(String restaurantName, String restaurantContact, String restaurantAddress, String restaurantEmail, String restaurantPassword) {\r\n        ArrayList<String> restaurantDetails = new ArrayList<>();\r\n        restaurantDetails.add(restaurantName);\r\n        restaurantDetails.add(restaurantContact);\r\n        restaurantDetails.add(restaurantAddress);\r\n        restaurantDetails.add(restaurantEmail);\r\n        restaurantDetails.add(restaurantPassword);\r\n        restaurants.add(restaurantDetails);\r\n\r\n    }\r\n\r\n    /** function gets mail and password and calls 3 functions to confirm that\r\n     *  mail and password exists and from the same account then returns the mail if true else returns null\r\n     *\r\n     * @param restaurant the restaurant object used to access the restaurant arraylist\r\n     * @param mail the mail entered by the restaurant\r\n     * @param password the password of the restaurant\r\n     * @return the mail of the restaurant if true else returns null\r\n     */\r\n\r\n    public String login(Restaurant restaurant, String mail, String password) {\r\n\r\n        boolean mailValidation, passwordValidation;\r\n        mailValidation = restaurant.compareEmail(mail);\r\n        passwordValidation = restaurant.comparePassword(password);\r\n        boolean sameAccount = verifyAccount(mail, password);\r\n        if ((mailValidation) && (passwordValidation) && (sameAccount)) {\r\n            return mail;\r\n\r\n        }\r\n\r\n        return \"null\";\r\n    }\r\n\r\n    /**when called this function gets the email entered and compare the email\r\n     * to the elements inside the 3rd row in the arraylist and if a match is found then it\r\n     * returns true if a match is found and false if no match is found\r\n     *\r\n     * @param email the email the user entered being compared to\r\n     * @return true if the restaurant email is unique and false if not\r\n     */\r\n    boolean compareEmail(String email) {\r\n        boolean uniqueEmail = false;\r\n        for (ArrayList<String> row : restaurants) {\r\n\r\n            if (row.size() >= 3 && row.get(3).equals(email)) {\r\n\r\n                return true; // Found a match\r\n\r\n            }\r\n\r\n        }\r\n        return uniqueEmail;\r\n    }\r\n\r\n    /** when called this function gets the password entered and compare the password\r\n     * to the elements inside the 4'th row in the arraylist and if a match is found then it\r\n     * returns true if a match is found and false if no match is found\r\n     *\r\n     * @param password the password the user entered being compared to\r\n     * @return true if the restaurant password is unique and false if not\r\n     */\r\n    boolean comparePassword(String password) {\r\n        boolean uniquePassword = false;\r\n        for (ArrayList<String> row : restaurants) {\r\n\r\n            if (row.size() >= 4 && row.get(4).equals(password)) {\r\n                return true; // Found a match\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return uniquePassword;\r\n    }\r\n\r\n    /** this function is used to search for a specific restaurant\r\n     * when the function is called it asks the user to enter the name of the restaurant it's searching for and\r\n     * compare the input with the name elements inside the arraylist and when a match is found\r\n     * it displays the name found\r\n     *\r\n     * @param restaurant the restaurant object that was made\r\n     */\r\n    public ArrayList restaurantSearching(Restaurant restaurant) {\r\n\r\n        int counter=0;\r\n        ArrayList<Integer> countedValues= new ArrayList<>();\r\n        System.out.println(\"enter the name of the restaurant you're searching for:\");\r\n        Scanner scanner = new Scanner(System.in);\r\n        String search = scanner.nextLine();\r\n        for (ArrayList<String> restaurant1 : restaurant.restaurants) {\r\n            counter++;\r\n            if (restaurant1.get(0).startsWith(search)) {\r\n\r\n                System.out.println(counter + \".\" + restaurant1.get(0));\r\n                countedValues.add(counter);\r\n            }\r\n        }\r\n        return countedValues;\r\n    }\r\n\r\n    /**\r\n     * this function gets the mail and the password entered by the user and checks that they're from same account\r\n     * by making sure the row is the same and then returns the result\r\n     * @param mail mail entered from the user\r\n     * @param password password entered from the user\r\n     * @return if they're the same return true else return false\r\n     */\r\n    private boolean verifyAccount(String mail, String password) {\r\n        int index = 0;\r\n        for (ArrayList<String> restaurants2 : restaurants) {\r\n            if (restaurants2.size() >= 3 && restaurants2.get(3).equals(mail))\r\n                index = restaurants2.indexOf(4);\r\n        }\r\n        for (ArrayList<String> restaurant3 : restaurants) {\r\n            if (restaurant3.size() >= 4 && restaurant3.get(4).equals(password))\r\n                if (index == restaurant3.indexOf(4))\r\n                    return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * this function return the details of the restaurant after getting the mail\r\n     * of the logged in restaurant,it does that after accessing the arraylist\r\n     * restaurant and comparing the current mail\r\n     * with all the mails and when a match is found it return's all the details\r\n     * @param mail mail of the restaurant\r\n     *\r\n     * @return  restaurants2 that contains restaurant's: name,phone,mail,address,password\r\n     */\r\n    public ArrayList<String> getRestaurantEmail(String mail)\r\n    {\r\n        ArrayList<String> restaurant = new ArrayList<>();\r\n\r\n\r\n\r\n        for (ArrayList<String> restaurants2 : restaurants) {\r\n            if (restaurants2.size() >= 3 && restaurants2.get(3).equals(mail))\r\n            {\r\n\r\n\r\n\r\n                String name = restaurants2.get(0);\r\n                String phoneNumber = restaurants2.get(1);\r\n                String address = restaurants2.get(2);\r\n                String email = restaurants2.get(3);\r\n                String password = restaurants2.get(4);\r\n                return restaurants2;\r\n            }\r\n        }\r\n        return null;\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/project/restaurant/Restaurant.java b/src/project/restaurant/Restaurant.java
--- a/src/project/restaurant/Restaurant.java	(revision b9cd107d8f990a33023584c0c36d153fb9aadf9e)
+++ b/src/project/restaurant/Restaurant.java	(date 1703420492416)
@@ -209,7 +209,7 @@
         String search = scanner.nextLine();
         for (ArrayList<String> restaurant1 : restaurant.restaurants) {
             counter++;
-            if (restaurant1.get(0).startsWith(search)) {
+            if (restaurant1.get(0).toLowerCase().startsWith(search.toLowerCase())) {
 
                 System.out.println(counter + "." + restaurant1.get(0));
                 countedValues.add(counter);
Index: reviews.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Name: faris\r\nPhone Number: 12345678912\r\nRestaurant Rating: 1.0\r\nStaff Rating: 1.0\r\nCleanliness Rating: 1.0\r\nFood Rating: 1.0\r\nDesign Rating: 1.0\r\nComments: N/A\r\n-------------------------\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/reviews.txt b/reviews.txt
--- a/reviews.txt	(revision b9cd107d8f990a33023584c0c36d153fb9aadf9e)
+++ b/reviews.txt	(date 1703421335287)
@@ -1,9 +1,9 @@
-Name: faris
-Phone Number: 12345678912
-Restaurant Rating: 1.0
-Staff Rating: 1.0
-Cleanliness Rating: 1.0
-Food Rating: 1.0
-Design Rating: 1.0
-Comments: N/A
+Name: ahmed
+Phone Number: 01114419113
+Restaurant Rating: 9.0
+Staff Rating: 9.0
+Cleanliness Rating: 9.0
+Food Rating: 9.0
+Design Rating: 9.0
+Comments: good
 -------------------------
Index: users.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>System Administrator;admin;admin123;HQ;0123456789;\r\nFaris Osama;farisroro8@gmail.com;faris123;my address;01123111713;\r\nTester;test;test123;Testing Address;Testing Number;\r\nNader;nzcghug@gmail.com;password;abc st;1234562213;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/users.txt b/users.txt
--- a/users.txt	(revision b9cd107d8f990a33023584c0c36d153fb9aadf9e)
+++ b/users.txt	(date 1703422468269)
@@ -2,3 +2,5 @@
 Faris Osama;farisroro8@gmail.com;faris123;my address;01123111713;
 Tester;test;test123;Testing Address;Testing Number;
 Nader;nzcghug@gmail.com;password;abc st;1234562213;
+ahmed;as@gmail.com;1234;cairo;01114419113;
+mo;mo@gmail.com;1234;cairo;01114419113;
